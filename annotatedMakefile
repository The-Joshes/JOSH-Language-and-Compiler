# Based on the paper "Recrusive Make Considered Harmful" by Peter Miller
# http://miller.emu.id.au/pmiller/books/rmch/

MODULES := src/josh

CPPFLAGS += -Iinclude/ 

LIBS :=

SRC := 

OUT := bin/josh

# include takes a list of Makefiles and "includes" all of their rules, definitions, etc
# patsubst takes the list of all the sub directories and appends module.mk to them
# for ex, src/josh becomes src/josh/module.mk
# all the rules in src/josh/module.mk are then included via include
include $(patsubst %, %/module.mk, $(MODULES))

# every library has a -l prepended to it
TOLOAD := $(patsubst %, -l%, $(LIBS))

# for all files named x.cpp, rename them x.o
# assign all these new x.o values to OBJ
OBJ := $(patsubst %.cpp, %.o, $(filter %.cpp, $(SRC))) 

$(OUT): $(OBJ)
	@$(CXX) $(CPPFLAGS) -o $@ $(OBJ) $(TOLOAD)

# include takes a list of Makefiles and "includes" all of their rules, definitions, etc
# $(OBJ:.o=.d) takes everything in OBJ and exchanges .o with .d
# for example, src/josh/josh.o becomes src/josh/josh.d
# src/josh/josh.d will then be included as a Makefile
-include $(OBJ:.o=.d)

# iterates over all files.cpp, performing the following commands
# g++ -MM -MG source.cpp creates a list of all dependencies of source.cpp in makefile dependency format
# ex, josh.cpp would yield (josh.cpp : josh.cpp a.h)
# the sed command takes output of the form "x.cpp : x.cpp a.h..." and renames it "x.cpp x.d: x.cpp a.h..."
# the output of this sed command is then printed to file x.d (a Makefile!)
%.d: %.cpp
	$(CXX) -MM -MG $(CPPFLAGS) $^ | sed -e 's@^\(.*\)\.o:@\1.d \1.o:@' > $@

.PHONY: clean
clean: 
	rm -f $(OBJ) $(OBJ:.o=.d) $(OUT)
