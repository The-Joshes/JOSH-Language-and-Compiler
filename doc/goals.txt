JOSH is a by-product of several different factors.  Two friends who studided compilers in college, enjoyed the work, and never found an opportunity to apply it outside of school.  Two kids named Josh who happened to be bored.  Two programmers who were fed up with modern programming languages and the compromises they made to solve problems inherent to any language.  So, these Joshes set out on a mission: to settle their intellectual curiousity and cure their boredom, they decided to create a new language and compiler.

JOSH the language draws deeply from C++ and Java.  Both C++ and Java are fine languages that have proven their worth in educational, private, and public workplace settings.  However, their widespread use does not imply that they are perfect.  JOSH seeks to draw elements from both, taking the good, and leaving the bad.  Below are a few issues we have with C++ and Java, as well as how we plan to solve them.

C++ Problems and Solutions
Problem:  Seperation of interface from implementation (.cpp vs .h) makes it nearly impossible to automatically create and track dependencies
Solution: Remove the need for header files by requiring declaration and definition to be in the same file

Problem:  Implementation of generics breaks traditional code design
Solution: Incoporate generics more naturally into the language, making them simpler to implement and compile

Problem:  Standard libraries are rather bare bone and don't encompass much more than the basics
Solution: Provide a rich, full-featured library with room for expansion

Java Problems and Solutions
Problem:  No explicit memory management degrades performance
Solution: Allow users to dynimcally control memory allocation and deallocation

Problem:  Everything-is-an-object requires simple programs to be overly complex and degrades performance when plain data needs to be represented in a concise way
Solution: Allow for user-defined "primitive" types, such as structs; at the same time, don't force OO on programmers

Problem:  Inconsistancies in pass by value and pass by reference; in code, objects and primitives look they are treated the same, but are handled completely differently
Solution: Allow programmers to clearly specify pass by value and pass by reference on both objects and primitives

