// 1) Create Module and Profile
Module *m = new Module(new Linux_x86_64());

// 2) Create all global values
Type *intType = NumericType::getIntegerType(INT, m);
GlobalValue *xAddr = GlobalValue::CreateVariable(IntType, m);

// 3) Create all functions
Type *mainType = FunctionType::Create(intType);
Function *f = Function::Create(m, mainType);
m->setMainFunction(f);

// 4) Start creating function
BasicBlock *start = BasicBlock::Create(f);
f->setEntryPoint(start);

Instruction *yAddr = AllocaInst::Create(intType, start);
GlobalValue *four = GlobalValue::CreateConstant(4, intType);  
StoreInst::Create(four, yAddr, start); // y = 4

BasicBlock *loop = BasicBlock::Create(f);
Instruction *y = LoadInst::Create(yAddr, loop);
Instruction *x = LoadInst::Create(xAddr, loop);              // x = *xAddr
Instruction *newX = BinaryInst::Create(ADD, y, x, loop);     // x = y + x
StoreInst::Create(newX, xAddr, loop);                        // *xAddr = x
Instruction *compare = BinaryInst::Create(LESS_OR_EQUAL, newX, y, loop); // (x <= y)

BasicBlock *returnBlock = BasicBlock::Create(f);
TerminatorInst::CreateConditionalBranch(loop, returnBlock, compare, loop);
TerminatorInst::CreateReturn(returnVal, returnBlock);               // return x
